{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Security Workshops 11/18/2019 - Latest builder session addition Using AWS Secrets Manager with Amazon RDS and AWS Fargate This Secrets Manager Builder Session guides you through the use of AWS Secrets Manager with Amazon RDS and AWS Fargate. In the first phase of the Builder Session, you will access the RDS data base with Secrets Manager. You will then use Secrets Manager to rotate the data base password. You will then use Secrets Manager to access the data base again to show that you can continue to access the data base after the rotation. In the second phase of the Builder Session, you will extend your use of Secrets Manager into an AWS Fargate container. You will create an Amazon ECS task definition to pass secrets to the Fargate container and then launch the Fargate container. You will then SSH into the container to show that the secret was passed to the container and that you can access the RDS data base. Welcome to the AWS security workshops portal! Here you will find a collection of workshops and other hands-on content aimed at helping you gain an understanding of the AWS service ecosystem and introduce you to a variety of best practices that can be applied to securing your environments and workloads running in AWS. Security and Compliance is a shared responsibility between AWS and the customer. AWS is responsible for protecting the infrastructure which runs all of the services offered and this responsibility is known as the Security of the Cloud . AWS customers benefit from a data center and network architecture built to satisfy the requirements of the most security-sensitive organizations. Customers responsibility, known as the Security in the Cloud , is determined by which services the customer chooses to use. The workshops and other hands-on content contained in this portal are focused on the Security in the Cloud and they will guide you through prepared scenarios that represent common use cases and operational tasks you'll face in building securely on AWS. They will also highlight the design principals from the AWS Well-Architected Framework Security Pillar , which can help you improve your security posture. Finally, in order to help you take a more holistic approach to security on AWS, we divide a lot of the content up into categories aligned to the NIST Cybersecurity Framework Core Functions to help you understand the scope of the content. Key Cloud Security Design Principals Implement a strong identity foundation Enable traceability Apply security at all layers Automate security best practices Protect data in transit and at rest Keep people away from data Prepare for security events Additional resources Below are some additional resources that have some great hands-on content: AWS Well-Architected Security Labs AWS Management Services Workshops","title":"Home"},{"location":"#aws-security-workshops","text":"11/18/2019 - Latest builder session addition Using AWS Secrets Manager with Amazon RDS and AWS Fargate This Secrets Manager Builder Session guides you through the use of AWS Secrets Manager with Amazon RDS and AWS Fargate. In the first phase of the Builder Session, you will access the RDS data base with Secrets Manager. You will then use Secrets Manager to rotate the data base password. You will then use Secrets Manager to access the data base again to show that you can continue to access the data base after the rotation. In the second phase of the Builder Session, you will extend your use of Secrets Manager into an AWS Fargate container. You will create an Amazon ECS task definition to pass secrets to the Fargate container and then launch the Fargate container. You will then SSH into the container to show that the secret was passed to the container and that you can access the RDS data base. Welcome to the AWS security workshops portal! Here you will find a collection of workshops and other hands-on content aimed at helping you gain an understanding of the AWS service ecosystem and introduce you to a variety of best practices that can be applied to securing your environments and workloads running in AWS. Security and Compliance is a shared responsibility between AWS and the customer. AWS is responsible for protecting the infrastructure which runs all of the services offered and this responsibility is known as the Security of the Cloud . AWS customers benefit from a data center and network architecture built to satisfy the requirements of the most security-sensitive organizations. Customers responsibility, known as the Security in the Cloud , is determined by which services the customer chooses to use. The workshops and other hands-on content contained in this portal are focused on the Security in the Cloud and they will guide you through prepared scenarios that represent common use cases and operational tasks you'll face in building securely on AWS. They will also highlight the design principals from the AWS Well-Architected Framework Security Pillar , which can help you improve your security posture. Finally, in order to help you take a more holistic approach to security on AWS, we divide a lot of the content up into categories aligned to the NIST Cybersecurity Framework Core Functions to help you understand the scope of the content. Key Cloud Security Design Principals Implement a strong identity foundation Enable traceability Apply security at all layers Automate security best practices Protect data in transit and at rest Keep people away from data Prepare for security events","title":"AWS Security Workshops"},{"location":"#additional-resources","text":"Below are some additional resources that have some great hands-on content: AWS Well-Architected Security Labs AWS Management Services Workshops","title":"Additional resources"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"getting-started/","text":"Getting Started Create an AWS account In order to complete the hands-on content on this site, you'll need an AWS Account . We strongly recommend that you use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for unless they provide sandbox accounts just for this purpose. Create an IAM user (with admin permissions) If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event that doesn't provide AWS accounts, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Click here if the workshop you are doing requires a Cloud9 instance If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. Choose your workshop You are now setup for the workshops! The site is broken down into two different types. Click on one of the types below to be taken to the directory: Builder Sessions - A 1 hour hands-on deep dive focused on a specific topic or AWS service. Workshops - A 2 hour hands-on deep dive using a broader set of AWS services together and covering multiple aspects of a particular security domain.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#create-an-aws-account","text":"In order to complete the hands-on content on this site, you'll need an AWS Account . We strongly recommend that you use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for unless they provide sandbox accounts just for this purpose.","title":"Create an AWS account"},{"location":"getting-started/#create-an-iam-user-with-admin-permissions","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an IAM user  (with admin permissions) "},{"location":"getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event that doesn't provide AWS accounts, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Click here if the workshop you are doing requires a Cloud9 instance If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime.","title":"Add credits  (optional) "},{"location":"getting-started/#choose-your-workshop","text":"You are now setup for the workshops! The site is broken down into two different types. Click on one of the types below to be taken to the directory: Builder Sessions - A 1 hour hands-on deep dive focused on a specific topic or AWS service. Workshops - A 2 hour hands-on deep dive using a broader set of AWS services together and covering multiple aspects of a particular security domain.","title":"Choose your workshop"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"builder-sessions/","text":"Builder Sessions Title Description Mitigate Risks Using Cloud-Native Infrastructure Security In this hands-on builder session, we help you identify which cloud-native solutions can mitigate the same risks while providing scalability, reliability, and cost optimization at a low operational burden. During this workshop, you will learn how to use cloud native controls like CloudTrail, Security Groups, GuardDuty and many more, to secure your cloud architecture. Level : Intermediate Duration : 1 hour NIST CSF Functions : Prevent, Detect CAF Components : Preventative, Detective Services : Amazon CloudWatch, Amazon GuardDuty AWS CloudTrail, AWS Config, Security Groups, Network ACLs Permission Boundaries: How to Truly Delegate Permissions on AWS Permission boundaries is probably one of the most important new IAM feature that has launched in awhile. This feature addresses a longstanding customer issue, namely, how do I delegate administration to my users. If you have developers that need to be able to create roles for Lambda functions, system administrators that need to be able to create IAM roles and users, or any similar scenario, then you need permission boundaries. Level : Intermediate Duration : 1 hour Services : AWS IAM Permission Boundaries Focus : Delegated Administration Using AWS Secrets Manager with Amazon RDS and AWS Fargate This Secrets Manager Builder Session guides you through the use of AWS Secrets Manager with Amazon RDS and AWS Fargate. In the first phase of the Builder Session, you will access the RDS data base with Secrets Manager. You will then use Secrets Manager to rotate the data base password. You will then use Secrets Manager to access the data base again to show that you can continue to access the data base after the rotation. In the second phase of the Builder Session, you will extend your use of Secrets Manager into an AWS Fargate container. You will create an Amazon ECS task definition to pass secrets to the Fargate container and then launch the Fargate container. You will then SSH into the container to show that the secret was passed to the container and that you can access the RDS data base. Level : 300 Duration : 1 hour NIST CSF Functions : Prevent CAF Components : Preventative Services : AWS Secrets Manager, Amazon RDS, AWS Fargate","title":"Directory"},{"location":"builder-sessions/#builder-sessions","text":"Title Description Mitigate Risks Using Cloud-Native Infrastructure Security In this hands-on builder session, we help you identify which cloud-native solutions can mitigate the same risks while providing scalability, reliability, and cost optimization at a low operational burden. During this workshop, you will learn how to use cloud native controls like CloudTrail, Security Groups, GuardDuty and many more, to secure your cloud architecture. Level : Intermediate Duration : 1 hour NIST CSF Functions : Prevent, Detect CAF Components : Preventative, Detective Services : Amazon CloudWatch, Amazon GuardDuty AWS CloudTrail, AWS Config, Security Groups, Network ACLs Permission Boundaries: How to Truly Delegate Permissions on AWS Permission boundaries is probably one of the most important new IAM feature that has launched in awhile. This feature addresses a longstanding customer issue, namely, how do I delegate administration to my users. If you have developers that need to be able to create roles for Lambda functions, system administrators that need to be able to create IAM roles and users, or any similar scenario, then you need permission boundaries. Level : Intermediate Duration : 1 hour Services : AWS IAM Permission Boundaries Focus : Delegated Administration Using AWS Secrets Manager with Amazon RDS and AWS Fargate This Secrets Manager Builder Session guides you through the use of AWS Secrets Manager with Amazon RDS and AWS Fargate. In the first phase of the Builder Session, you will access the RDS data base with Secrets Manager. You will then use Secrets Manager to rotate the data base password. You will then use Secrets Manager to access the data base again to show that you can continue to access the data base after the rotation. In the second phase of the Builder Session, you will extend your use of Secrets Manager into an AWS Fargate container. You will create an Amazon ECS task definition to pass secrets to the Fargate container and then launch the Fargate container. You will then SSH into the container to show that the secret was passed to the container and that you can access the RDS data base. Level : 300 Duration : 1 hour NIST CSF Functions : Prevent CAF Components : Preventative Services : AWS Secrets Manager, Amazon RDS, AWS Fargate","title":"Builder Sessions"},{"location":"builder-sessions/permission-boundary/build/","text":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Build Phase) Permission boundaries is probably one of the most important new IAM features that has launched in a while. This feature addresses a longstanding customer issue, namely, how do I delegate administration to my users. If you have system administrators that need to be able to create IAM roles and users, developers that need to be able to create roles for Lambda functions, or any similar scenario, then you need permission boundaries. Environment Setup AWS Sponsored Event Browse to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Individual Launch the CloudFormation stack below to setup the Permission Boundary environment: Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template , Specify Details, and Options** sections. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create**. This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Scenario As the administrator for an AWS account hosting multiple production applications, you've been tasked with creating a new administrator role to delegate some of your responsibilities. This new role will be responsible for doing all the administration on the resources for the Ares Mission . The diagram above showcases the two applications currently being hosted in the AWS account and their associated resources. Currently there is only one application related to the Ares Mission but there is a plan to migrate three more applications for this mission by the end of the year. The new role should account for current and future Ares Mission applications to reduce your overhead and friction with the web administrators. The web administrators for the Ares Mission should have permissions to create and administer resources related to that mission. This means they should be able to: Create, modify, and delete IAM policies and roles. Any role created must have restricted permissions to ensure a web administrator cannot elevate their privileges or the privileges of the application. Create, modify, and delete Ares Mission Lambda functions. The web administrators should not be able to impact any resources in the account that are not part of the Ares Mission application including users, groups, roles, S3 buckets, EC2 instances, etc. In this case, they should not be able to modify resources of the Rover Mission. All resources are located in the us-west-2 region. Task 1 - Create a permission boundary for Lambda Functions ACTION : Create a new IAM policy that will act as the permission boundary for the web admins. Name the policy identity-ex-permissionboundary-ares-lambda Hint : Friendly Names and Paths . The question marks ???? in the resource element below should be replaced with something that could act as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateLogGroup , Effect : Allow , Action : logs:CreateLogGroup , Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:* }, { Sid : CreateLogStreamandEvents , Effect : Allow , Action : [ logs:CreateLogStream , logs:PutLogEvents ], Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:log-group:/aws/lambda/identity-ex-????:* }, { Sid : AllowedS3GetObject , Effect : Allow , Action : [ s3:List* ], Resource : arn:aws:s3:::identity-ex-???? } ] } Task 2 - Create a permission policy for the Web Admin ACTION : Create the permission policy that will be attached to the webadmin AWS IAM user. Name the new policy identity-ex-webadmin-permissionpolicy . Hint : Friendly Names and Paths . The question marks ???? in the resource element below should be replaced with something that could act as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateCustomerManagedPolicies , Effect : Allow , Action : [ iam:CreatePolicy , iam:DeletePolicy , iam:CreatePolicyVersion , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : arn:aws:iam::ACCOUNT_ID:policy/identity-ex-???? }, { Sid : RoleandPolicyActionswithnoPermissionBoundarySupport , Effect : Allow , Action : [ iam:UpdateRole , iam:DeleteRole ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex-???? ] }, { Sid : CreateRoles , Effect : Allow , Action : [ iam:CreateRole , iam:AttachRolePolicy , iam:DetachRolePolicy ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex-???? ], Condition : { StringEquals : { iam:PermissionsBoundary : arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda } } }, { Sid : LambdaFullAccesswithResourceRestrictions , Effect : Allow , Action : lambda:* , Resource : arn:aws:lambda:us-west-2:ACCOUNT_ID:function:identity-ex-???? }, { Sid : PassRoletoLambda , Effect : Allow , Action : iam:PassRole , Resource : arn:aws:iam::ACCOUNT_ID:role/identity-ex-???? , Condition : { StringLikeIfExists : { iam:PassedToService : lambda.amazonaws.com } } }, { Sid : AdditionalPermissionsforLambda , Effect : Allow , Action : [ kms:ListAliases , logs:Describe* , logs:ListTagsLogGroup , logs:FilterLogEvents , logs:GetLogEvents ], Resource : * }, { Sid : DenyPermissionBoundaryandPolicyDeleteModify , Effect : Deny , Action : [ iam:CreatePolicyVersion , iam:DeletePolicy , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : [ arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda , arn:aws:iam::ACCOUNT_ID:policy/identity-ex-webadmin-permissionpolicy ] }, { Sid : DenyRolePermissionBoundaryDelete , Effect : Deny , Action : iam:DeleteRolePermissionsBoundary , Resource : * } ] } Task 3 - Create the Web Admin user ACTION : Create an IAM User and name it webadmin . The user will need console access so give it a password. Attach the identity-ex-webadmin-permissionpolicy , IAMReadOnlyAccess AWSLambdaReadOnlyAccess policies to the IAM user. When you are done the webadmin user should have three policies attached: identity-ex-webadmin-permissionpolicy, IAMReadOnlyAccess AWSLambdaReadOnlyAccess. Task 4 - Gather info needed for the Verify phase ACTION : Now that you have setup the IAM user for the web admins, it's time to pass this information on to the next team who will work through the VERIFY tasks. You need to gather some details about your IAM user and then hand this info to the next team. Copy the IAM users sign-in link , the IAM user name (if you used a name other then webadmin ) and the password you used. You will also need the resource restriction that you used in your policies and the name you used for the permission policy and permission boundary (if you used names other than the ones recommended above) Here are all of the details you need to pass to another team: IAM users sign-in link: IAM user name: IAM user password: Resource restriction identifier: Permission boundary name: (recommended name: identity-ex-permissionboundary-ares-lambda ) Permission policy: (recommended name: identity-ex-webadmin-permissionpolicy ) Enter this information into the VERIFY phase form and exchange forms with another team so you both can work through the tasks. You can now move on to the Verify phase!","title":"Build Phase"},{"location":"builder-sessions/permission-boundary/build/#permission-boundaries-how-to-truly-delegate-permissions-on-aws-build-phase","text":"Permission boundaries is probably one of the most important new IAM features that has launched in a while. This feature addresses a longstanding customer issue, namely, how do I delegate administration to my users. If you have system administrators that need to be able to create IAM roles and users, developers that need to be able to create roles for Lambda functions, or any similar scenario, then you need permission boundaries.","title":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Build Phase)"},{"location":"builder-sessions/permission-boundary/build/#environment-setup","text":"AWS Sponsored Event Browse to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Individual Launch the CloudFormation stack below to setup the Permission Boundary environment: Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template , Specify Details, and Options** sections. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create**. This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE .","title":"Environment Setup"},{"location":"builder-sessions/permission-boundary/build/#scenario","text":"As the administrator for an AWS account hosting multiple production applications, you've been tasked with creating a new administrator role to delegate some of your responsibilities. This new role will be responsible for doing all the administration on the resources for the Ares Mission . The diagram above showcases the two applications currently being hosted in the AWS account and their associated resources. Currently there is only one application related to the Ares Mission but there is a plan to migrate three more applications for this mission by the end of the year. The new role should account for current and future Ares Mission applications to reduce your overhead and friction with the web administrators. The web administrators for the Ares Mission should have permissions to create and administer resources related to that mission. This means they should be able to: Create, modify, and delete IAM policies and roles. Any role created must have restricted permissions to ensure a web administrator cannot elevate their privileges or the privileges of the application. Create, modify, and delete Ares Mission Lambda functions. The web administrators should not be able to impact any resources in the account that are not part of the Ares Mission application including users, groups, roles, S3 buckets, EC2 instances, etc. In this case, they should not be able to modify resources of the Rover Mission. All resources are located in the us-west-2 region.","title":"Scenario"},{"location":"builder-sessions/permission-boundary/build/#task-1-create-a-permission-boundary-for-lambda-functions","text":"ACTION : Create a new IAM policy that will act as the permission boundary for the web admins. Name the policy identity-ex-permissionboundary-ares-lambda Hint : Friendly Names and Paths . The question marks ???? in the resource element below should be replaced with something that could act as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateLogGroup , Effect : Allow , Action : logs:CreateLogGroup , Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:* }, { Sid : CreateLogStreamandEvents , Effect : Allow , Action : [ logs:CreateLogStream , logs:PutLogEvents ], Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:log-group:/aws/lambda/identity-ex-????:* }, { Sid : AllowedS3GetObject , Effect : Allow , Action : [ s3:List* ], Resource : arn:aws:s3:::identity-ex-???? } ] }","title":"Task 1 - Create a permission boundary for Lambda Functions"},{"location":"builder-sessions/permission-boundary/build/#task-2-create-a-permission-policy-for-the-web-admin","text":"ACTION : Create the permission policy that will be attached to the webadmin AWS IAM user. Name the new policy identity-ex-webadmin-permissionpolicy . Hint : Friendly Names and Paths . The question marks ???? in the resource element below should be replaced with something that could act as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateCustomerManagedPolicies , Effect : Allow , Action : [ iam:CreatePolicy , iam:DeletePolicy , iam:CreatePolicyVersion , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : arn:aws:iam::ACCOUNT_ID:policy/identity-ex-???? }, { Sid : RoleandPolicyActionswithnoPermissionBoundarySupport , Effect : Allow , Action : [ iam:UpdateRole , iam:DeleteRole ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex-???? ] }, { Sid : CreateRoles , Effect : Allow , Action : [ iam:CreateRole , iam:AttachRolePolicy , iam:DetachRolePolicy ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex-???? ], Condition : { StringEquals : { iam:PermissionsBoundary : arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda } } }, { Sid : LambdaFullAccesswithResourceRestrictions , Effect : Allow , Action : lambda:* , Resource : arn:aws:lambda:us-west-2:ACCOUNT_ID:function:identity-ex-???? }, { Sid : PassRoletoLambda , Effect : Allow , Action : iam:PassRole , Resource : arn:aws:iam::ACCOUNT_ID:role/identity-ex-???? , Condition : { StringLikeIfExists : { iam:PassedToService : lambda.amazonaws.com } } }, { Sid : AdditionalPermissionsforLambda , Effect : Allow , Action : [ kms:ListAliases , logs:Describe* , logs:ListTagsLogGroup , logs:FilterLogEvents , logs:GetLogEvents ], Resource : * }, { Sid : DenyPermissionBoundaryandPolicyDeleteModify , Effect : Deny , Action : [ iam:CreatePolicyVersion , iam:DeletePolicy , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : [ arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda , arn:aws:iam::ACCOUNT_ID:policy/identity-ex-webadmin-permissionpolicy ] }, { Sid : DenyRolePermissionBoundaryDelete , Effect : Deny , Action : iam:DeleteRolePermissionsBoundary , Resource : * } ] }","title":"Task 2 - Create a permission policy for the Web Admin"},{"location":"builder-sessions/permission-boundary/build/#task-3-create-the-web-admin-user","text":"ACTION : Create an IAM User and name it webadmin . The user will need console access so give it a password. Attach the identity-ex-webadmin-permissionpolicy , IAMReadOnlyAccess AWSLambdaReadOnlyAccess policies to the IAM user. When you are done the webadmin user should have three policies attached: identity-ex-webadmin-permissionpolicy, IAMReadOnlyAccess AWSLambdaReadOnlyAccess.","title":"Task 3 - Create the Web Admin user"},{"location":"builder-sessions/permission-boundary/build/#task-4-gather-info-needed-for-the-verify-phase","text":"ACTION : Now that you have setup the IAM user for the web admins, it's time to pass this information on to the next team who will work through the VERIFY tasks. You need to gather some details about your IAM user and then hand this info to the next team. Copy the IAM users sign-in link , the IAM user name (if you used a name other then webadmin ) and the password you used. You will also need the resource restriction that you used in your policies and the name you used for the permission policy and permission boundary (if you used names other than the ones recommended above) Here are all of the details you need to pass to another team: IAM users sign-in link: IAM user name: IAM user password: Resource restriction identifier: Permission boundary name: (recommended name: identity-ex-permissionboundary-ares-lambda ) Permission policy: (recommended name: identity-ex-webadmin-permissionpolicy ) Enter this information into the VERIFY phase form and exchange forms with another team so you both can work through the tasks. You can now move on to the Verify phase!","title":"Task 4 - Gather info needed for the Verify phase"},{"location":"builder-sessions/permission-boundary/verify/","text":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Verify Phase) We are now in the Verify phase. It is time to put on the hat of the web administrator and test the access to ensure the permissions are setup correctly. You'll be logging in to the AWS account you were delegated access to and perform a number of verification tasks. Console Login You should have received from another team the following information. You will need this information to access the AWS console IAM users sign-in link IAM user name IAM user password Resource restriction identifier Permission boundary name Requirements The only requirement is to verify you can complete the following tasks. The web admins should only have access to the following resources: IAM policies and roles created by the web admins Lambda functions created by the web admins The web admins should not be able to impact any resources in the account that they do not own including users, groups, roles, S3 buckets, EC2 instances, etc. The following steps should be taken to validate that the delegation was done properly. Verify that you are able to create an IAM policy, create an IAM role with that policy attached and then create a Lambda function and pass that role to it. Task 1 - Create a customer managed IAM policy The first step is to create a customer managed IAM policy. This will define the permissions of the role that you will pass to a Lambda function. Since the function will be working with S3 and since the point of this is to show how permission boundaries work, use the following policy which grants basic Lambda logging permissions and S3 full access. Keep in mind the resource restrictions put in place which will require you to use a certain name for the policy. What is the resource restriction identifier that was given to you? { Version : 2012-10-17 , Statement : [ { Effect : Allow , Action : [ logs:CreateLogGroup , logs:CreateLogStream , logs:PutLogEvents , s3:* ], Resource : * } ] } Task 2 - Create an IAM role Next you will create an IAM Role. Choose Lambda as the service for this role. Attach the policy you just created and the permission boundary (which will most likely be named: identity-ex-permissionboundary-ares-lambda ) Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you? Task 3 - Create a Lambda function Finally you will create a Node.js 8.10 Lambda function using the code below and attach the IAM role you just created to it. You will need to replace \"ELB_ACCESS_LOGS_BUCKET_NAME\" with bucket from your account that begins with \"identity-ex-ares*\" . Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you? const AWS = require ( aws-sdk ); const s3 = new AWS . S3 (); exports . handler = async ( event ) = { console.log( Loading function ) ; const allKeys = [] ; await getKeys({ Bucket : ELB_ACCESS_LOGS_BUCKET_NAME } , allKeys ); return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3.listObjectsV2(params).promise() ; response.Contents.forEach(obj = keys.push(obj.Key)) ; if (response.IsTruncated) { const newParams = Object.assign({ } , params ); newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ); } } Test the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the ELB logs in the ELB access logs bucket the object in S3. In order to test you will need to create a test event. The parameters of the test do not matter. Cleanup In order to prevent charges to your account we recommend cleaning up the infrastructure that was created. Expand one of the following dropdowns and follow the instructions: AWS Sponsored Event No cleanup required! The responsibility falls to AWS. Individual You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Ares S3 bucket. Go to the Amazon S3 console. Click on the bucket named identity-ex-ares-app Click Delete Enter the bucket name again to confirm and click Delete . Delete the CloudFormation stack ( Identity-PB-Builder-Session ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack . Summary Congratulations, you've completed the Permission Boundaries Builder session! Hopefully by going through this session you have a better idea of what permission boundaries are, where they can be used, and are starting to think about where you can apply them in your environments.","title":"Verify Phase"},{"location":"builder-sessions/permission-boundary/verify/#permission-boundaries-how-to-truly-delegate-permissions-on-aws-verify-phase","text":"We are now in the Verify phase. It is time to put on the hat of the web administrator and test the access to ensure the permissions are setup correctly. You'll be logging in to the AWS account you were delegated access to and perform a number of verification tasks.","title":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Verify Phase)"},{"location":"builder-sessions/permission-boundary/verify/#console-login","text":"You should have received from another team the following information. You will need this information to access the AWS console IAM users sign-in link IAM user name IAM user password Resource restriction identifier Permission boundary name","title":"Console Login"},{"location":"builder-sessions/permission-boundary/verify/#requirements","text":"The only requirement is to verify you can complete the following tasks. The web admins should only have access to the following resources: IAM policies and roles created by the web admins Lambda functions created by the web admins The web admins should not be able to impact any resources in the account that they do not own including users, groups, roles, S3 buckets, EC2 instances, etc. The following steps should be taken to validate that the delegation was done properly. Verify that you are able to create an IAM policy, create an IAM role with that policy attached and then create a Lambda function and pass that role to it.","title":"Requirements"},{"location":"builder-sessions/permission-boundary/verify/#task-1-create-a-customer-managed-iam-policy","text":"The first step is to create a customer managed IAM policy. This will define the permissions of the role that you will pass to a Lambda function. Since the function will be working with S3 and since the point of this is to show how permission boundaries work, use the following policy which grants basic Lambda logging permissions and S3 full access. Keep in mind the resource restrictions put in place which will require you to use a certain name for the policy. What is the resource restriction identifier that was given to you? { Version : 2012-10-17 , Statement : [ { Effect : Allow , Action : [ logs:CreateLogGroup , logs:CreateLogStream , logs:PutLogEvents , s3:* ], Resource : * } ] }","title":"Task 1 - Create a customer managed IAM policy"},{"location":"builder-sessions/permission-boundary/verify/#task-2-create-an-iam-role","text":"Next you will create an IAM Role. Choose Lambda as the service for this role. Attach the policy you just created and the permission boundary (which will most likely be named: identity-ex-permissionboundary-ares-lambda ) Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you?","title":"Task 2 - Create an IAM role"},{"location":"builder-sessions/permission-boundary/verify/#task-3-create-a-lambda-function","text":"Finally you will create a Node.js 8.10 Lambda function using the code below and attach the IAM role you just created to it. You will need to replace \"ELB_ACCESS_LOGS_BUCKET_NAME\" with bucket from your account that begins with \"identity-ex-ares*\" . Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you? const AWS = require ( aws-sdk ); const s3 = new AWS . S3 (); exports . handler = async ( event ) = { console.log( Loading function ) ; const allKeys = [] ; await getKeys({ Bucket : ELB_ACCESS_LOGS_BUCKET_NAME } , allKeys ); return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3.listObjectsV2(params).promise() ; response.Contents.forEach(obj = keys.push(obj.Key)) ; if (response.IsTruncated) { const newParams = Object.assign({ } , params ); newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ); } } Test the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the ELB logs in the ELB access logs bucket the object in S3. In order to test you will need to create a test event. The parameters of the test do not matter.","title":"Task 3 - Create a Lambda function"},{"location":"builder-sessions/permission-boundary/verify/#cleanup","text":"In order to prevent charges to your account we recommend cleaning up the infrastructure that was created. Expand one of the following dropdowns and follow the instructions: AWS Sponsored Event No cleanup required! The responsibility falls to AWS. Individual You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Ares S3 bucket. Go to the Amazon S3 console. Click on the bucket named identity-ex-ares-app Click Delete Enter the bucket name again to confirm and click Delete . Delete the CloudFormation stack ( Identity-PB-Builder-Session ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack .","title":"Cleanup"},{"location":"builder-sessions/permission-boundary/verify/#summary","text":"Congratulations, you've completed the Permission Boundaries Builder session! Hopefully by going through this session you have a better idea of what permission boundaries are, where they can be used, and are starting to think about where you can apply them in your environments.","title":"Summary"},{"location":"workshops/","text":"Workshops Identity Title Description Access Delegation In this workshop you will learn how to use Amazon IAM to delegate access to these services to AWS Security Administrators and AWS Security Operators. AWS Security Administrators require full access to AWS security services while AWS Security Operators only require \"read only\" access to the services. You will use AWS IAM roles to do this and thereby promote the Principle of Least Privilege - giving users the minimum level of privilege they need to do their tasks. Level : 200 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive Permissions boundaries: how to delegate permissions on AWS In this workshop, you learn how to secure access permissions for multiple teams operating in a single AWS account. We provide an example three-tier web application running in production, and you practice delegating permissions to web administrators so they can modify only their own resources without impacting the permissions needed to do their job.All attendees need a laptop, an active AWS Account, an AWS IAM Administrator, and a familiarity with core AWS services. Level : 400 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive Serverless Identity In this workshop you will be focused on improving the identity controls of the a serverless application. You will get exposed to different identity concepts through the use of a variety of services such as AWS IAM, Amazon S3, Amazon CloudFront, and Amazon Cognito. Upon completion you should have a better idea of how to use native AWS identity controls to improve the security posture of a serverless application. Level : 300 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive Data Protection Title Description Data Protection These set of workshops demonstrate concepts of Data protection using services such as AWS KMS and AWS Certificate manager. You will learn about server side encryption, client side encryption - with and without data key caching and how AWS private certificate authority can be used to create private certificates for private domains or devices. Infrastructure Security Title Description Finding and addressing Network Misconfigurations on AWS In this workshop you will learn how to use the Amazon Inspector Network Reachability report to validate your network configuration without needing a deep background in networking. You will use this report to find misconfigurations that may result in unintended behaviors and unexpected vulnerabilities. You will finish the workshop by remediating these vulnerabilities by integrating the findings of Amazon Inspector with other AWS services. Level : 300 Duration : 2 hours NIST CSF Functions : Detect, Respond CAF Components : Detective, Responsive Protecting workloads on AWS from the instance to the edge Your mission in this workshop is to use AWS Web Application Firewall (WAF), Inspector and Amazon Systems Manager to help build an effective set of controls around your AWS workloads. You will learn to use AWS WAF to mitigate common attack vectors against web applications such as SQL injection and Cross Site Scripting. You will also learn how to use Amazon Inspector and Amazon Systems Manager to automate security assessments and operational tasks such as patching and configuration management across your EC2 fleet. Level : 300 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive Detection and Response Title Description Detection with Machine Learning This workshop shows how you can use an IP-based machine learning algorithm with Amazon SageMaker to augment and enrich findings from AWS Security services such as Amazon GuardDuty. You'll learn how to load the notebook in SageMaker, train the model, and score findings to determine abnormality of the activity. Scaling threat detection and response on AWS This hands-on workshop is where you will learn about a number of AWS services involved with threat detection and response as we walk through real-world threat scenarios. Learn about the threat detection capabilities of Amazon GuardDuty, Amazon Macie and AWS Security Hub and the available response options. For each hands-on scenario, we review methods to detect and respond to threats using the following services: AWS CloudTrail, Amazon VPC flow logs, Amazon CloudWatch Events, Amazon Macie, AWS Lambda, Amazon Inspector, Amazon GuardDuty and Amazon Security Hub. Level : 300 Duration : 2 - 3 hours NIST CSF Functions : Detect and Respond CAF Components : Detective, Responsive","title":"Directory"},{"location":"workshops/#workshops","text":"","title":"Workshops"},{"location":"workshops/#identity","text":"Title Description Access Delegation In this workshop you will learn how to use Amazon IAM to delegate access to these services to AWS Security Administrators and AWS Security Operators. AWS Security Administrators require full access to AWS security services while AWS Security Operators only require \"read only\" access to the services. You will use AWS IAM roles to do this and thereby promote the Principle of Least Privilege - giving users the minimum level of privilege they need to do their tasks. Level : 200 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive Permissions boundaries: how to delegate permissions on AWS In this workshop, you learn how to secure access permissions for multiple teams operating in a single AWS account. We provide an example three-tier web application running in production, and you practice delegating permissions to web administrators so they can modify only their own resources without impacting the permissions needed to do their job.All attendees need a laptop, an active AWS Account, an AWS IAM Administrator, and a familiarity with core AWS services. Level : 400 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive Serverless Identity In this workshop you will be focused on improving the identity controls of the a serverless application. You will get exposed to different identity concepts through the use of a variety of services such as AWS IAM, Amazon S3, Amazon CloudFront, and Amazon Cognito. Upon completion you should have a better idea of how to use native AWS identity controls to improve the security posture of a serverless application. Level : 300 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive","title":"Identity"},{"location":"workshops/#data-protection","text":"Title Description Data Protection These set of workshops demonstrate concepts of Data protection using services such as AWS KMS and AWS Certificate manager. You will learn about server side encryption, client side encryption - with and without data key caching and how AWS private certificate authority can be used to create private certificates for private domains or devices.","title":"Data Protection"},{"location":"workshops/#infrastructure-security","text":"Title Description Finding and addressing Network Misconfigurations on AWS In this workshop you will learn how to use the Amazon Inspector Network Reachability report to validate your network configuration without needing a deep background in networking. You will use this report to find misconfigurations that may result in unintended behaviors and unexpected vulnerabilities. You will finish the workshop by remediating these vulnerabilities by integrating the findings of Amazon Inspector with other AWS services. Level : 300 Duration : 2 hours NIST CSF Functions : Detect, Respond CAF Components : Detective, Responsive Protecting workloads on AWS from the instance to the edge Your mission in this workshop is to use AWS Web Application Firewall (WAF), Inspector and Amazon Systems Manager to help build an effective set of controls around your AWS workloads. You will learn to use AWS WAF to mitigate common attack vectors against web applications such as SQL injection and Cross Site Scripting. You will also learn how to use Amazon Inspector and Amazon Systems Manager to automate security assessments and operational tasks such as patching and configuration management across your EC2 fleet. Level : 300 Duration : 2 hours NIST CSF Functions : Protect CAF Components : Preventive","title":"Infrastructure Security"},{"location":"workshops/#detection-and-response","text":"Title Description Detection with Machine Learning This workshop shows how you can use an IP-based machine learning algorithm with Amazon SageMaker to augment and enrich findings from AWS Security services such as Amazon GuardDuty. You'll learn how to load the notebook in SageMaker, train the model, and score findings to determine abnormality of the activity. Scaling threat detection and response on AWS This hands-on workshop is where you will learn about a number of AWS services involved with threat detection and response as we walk through real-world threat scenarios. Learn about the threat detection capabilities of Amazon GuardDuty, Amazon Macie and AWS Security Hub and the available response options. For each hands-on scenario, we review methods to detect and respond to threats using the following services: AWS CloudTrail, Amazon VPC flow logs, Amazon CloudWatch Events, Amazon Macie, AWS Lambda, Amazon Inspector, Amazon GuardDuty and Amazon Security Hub. Level : 300 Duration : 2 - 3 hours NIST CSF Functions : Detect and Respond CAF Components : Detective, Responsive","title":"Detection and Response"}]}